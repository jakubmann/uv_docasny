{"version":3,"sources":["components/Canvas.js","components/Color.js","App.js","reportWebVitals.js","index.js"],"names":["Canvas","state","strokestyle","lineWidth","isPainting","prevPos","offsetX","offsetY","componentDidMount","canvas","width","height","ctx","getContext","lineJoin","lineCap","onMouseDown","nativeEvent","setState","onMouseMove","offsetData","paint","endPaintEvent","currPos","x","y","beginPath","strokeStyle","props","moveTo","lineTo","stroke","className","ref","this","onMouseUp","onMouseLeave","React","Component","Color","colors","map","c","i","style","onClick","changeColor","App","changeWidth","e","target","value","color","type","min","max","step","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.007b804b.chunk.js","sourcesContent":["import React from 'react'\n\nexport default class Canvas extends React.Component {\n    state = {\n        strokestyle: '#000000',\n        lineWidth: 20,\n        isPainting: false,\n        prevPos: {offsetX: 0, offsetY: 0}\n    }\n\n    componentDidMount = () => {\n        this.canvas.width = 1000\n        this.canvas.height = 1500\n        this.ctx = this.canvas.getContext('2d')\n        this.ctx.lineJoin = 'round'\n        this.ctx.lineCap = 'round'\n    }\n\n    onMouseDown = ({nativeEvent}) => {\n        const {offsetX, offsetY} = nativeEvent\n        this.setState({\n            isPainting: true,\n            prevPos: {offsetX, offsetY}\n        })\n    }\n\n    onMouseMove = ({nativeEvent}) => {\n        if (this.state.isPainting) {\n            const {offsetX, offsetY} = nativeEvent\n            const offsetData = {offsetX, offsetY}\n            this.paint(offsetData)\n        }\n    }\n\n    endPaintEvent = () => {\n        if (this.state.isPainting) {\n            this.setState({isPainting: false})\n        }\n    }\n\n    paint = (currPos) => {\n        const {offsetX, offsetY} = currPos\n        const {offsetX: x, offsetY: y} = this.state.prevPos\n\n        this.ctx.beginPath()\n        this.ctx.strokeStyle = this.props.strokeStyle\n        this.ctx.lineWidth = this.props.lineWidth\n        this.ctx.moveTo(x, y)\n        this.ctx.lineTo(offsetX, offsetY)\n        this.ctx.stroke()\n        this.setState({\n            prevPos: {offsetX, offsetY}\n        })\n    }\n\n    render() {\n        return (\n                <canvas \n                    className=\"canvas\"\n                    ref={ref => this.canvas = ref}\n                    onMouseDown={this.onMouseDown}\n                    onMouseUp={this.endPaintEvent}\n                    onMouseLeave={this.endPaintEvent}\n                    onMouseMove={this.onMouseMove}\n                />\n        )\n    }\n}","import React from 'react'\n\nexport default class Color extends React.Component {\n    \n    state = {\n        colors: ['#000000', '#ffffff', '#1fea00', '#ea0000', '#0f59e2']\n    }\n    render() {\n        return (\n            <div className=\"colors\">\n                {this.state.colors.map((c, i) => {\n                    if (c === '#ffffff') {\n                        return <div className=\"color\" key={i} style={{'background': c, 'border': '1px solid black'}} onClick={() => this.props.changeColor(c)}></div>\n\n                    }\n                    else {\n                        return <div className=\"color\" key={i} style={{'background': c}} onClick={() => this.props.changeColor(c)}></div>\n                    }\n                })}\n            </div>\n        )\n    }\n}","import React from 'react'\nimport './style.css'\nimport Canvas from './components/Canvas.js'\nimport Color from './components/Color.js'\n\n\n\nexport default class App extends React.Component {\n  state = {\n    lineWidth: 20,\n    strokeStyle: '#000000'\n  }\n  \n  \n\n  changeWidth = e => {\n    this.setState({\n      lineWidth: e.target.value\n    })\n  }\n\n  changeColor = (color) => {\n    this.setState({\n      strokeStyle: color\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"shirt\">\n          <Canvas lineWidth={this.state.lineWidth} strokeStyle={this.state.strokeStyle}/>\n        </div>\n        <div className=\"tools\">\n          <div className=\"brushSize\">\n            <input type=\"range\" min=\"0\" max=\"200\"  step=\"10\" value={this.state.lineWidth} onChange={this.changeWidth}></input>\n          </div>\n          <Color changeColor={this.changeColor} />\n        </div>\n      </div>\n    );\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}